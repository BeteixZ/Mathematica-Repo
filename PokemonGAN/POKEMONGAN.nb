(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1429856,      25254]
NotebookOptionsPosition[   1426492,      25197]
NotebookOutlinePosition[   1426908,      25214]
CellTagsIndexPosition[   1426865,      25211]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["POKEMON GAN", "Title",
 CellChangeTimes->{{3.8551037390849886`*^9, 
  3.8551037428980465`*^9}},ExpressionUUID->"89598524-14eb-45d9-9495-\
e4b5709e4981"],

Cell["\<\
This is inspired by J\[EAcute]r\[OHat]me Louradour, Wolfram Research. For \
details, please check \
https://blog.wolfram.com/2020/08/18/generative-adversarial-networks-gans-in-\
the-wolfram-language/ .\
\>", "Text",
 CellChangeTimes->{{3.8551037013214054`*^9, 3.8551037318246403`*^9}, {
  3.855103761838747*^9, 
  3.855103779661618*^9}},ExpressionUUID->"0ee2376f-74c0-495e-ba5f-\
4abcf2a12b0b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pokemons", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"ImageResize", "[", 
      RowBox[{
       RowBox[{"ImagePad", "[", 
        RowBox[{"#", ",", 
         InterpretationBox[
          DynamicModuleBox[{Typeset`open = False}, 
           TemplateBox[{"Expression", 
             RowBox[{"Block", "[", 
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], 
               "]"}], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Byte count: \"", "IconizedLabel"], 
                  "\[InvisibleSpace]", 
                  TagBox["1472", "IconizedItem"]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             Dynamic[Typeset`open]},
            "IconizedObject"]],
          
          Block[{$CellContext`width, $CellContext`height}, \
{$CellContext`width, $CellContext`height} = ImageDimensions[#]; {
             Table[
              Round[(1/2) Ramp[$CellContext`height - $CellContext`width]], 2], 
             Table[
              Round[(1/2) Ramp[$CellContext`width - $CellContext`height]], 
              2]}],
          SelectWithContents->True,
          Selectable->False], ",", 
         RowBox[{"RGBColor", "[", 
          RowBox[{"1", ",", "1", ",", "1"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"64", ",", "64"}], "}"}]}], "]"}], "&"}], "/@", 
    RowBox[{"DeleteMissing", "@", 
     RowBox[{"EntityValue", "[", 
      RowBox[{
       RowBox[{"EntityList", "@", "\"\<Pokemon\>\""}], ",", 
       RowBox[{"EntityProperty", "[", 
        RowBox[{"\"\<Pokemon\>\"", ",", "\"\<Image\>\""}], "]"}]}], 
      "]"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.806537724203382*^9, {3.855102552377324*^9, 3.8551026109156857`*^9}, {
   3.8551027779610786`*^9, 3.8551028291390495`*^9}, {3.855102864857782*^9, 
   3.8551029556508017`*^9}, {3.8551030298347874`*^9, 3.8551030887745047`*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"1dd0fe20-853c-4f28-8096-7e6dd6b1f19a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"pokemons", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.8551026310807896`*^9, 3.85510264135923*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"ee13c919-76b8-4234-a30f-933bd81d7c72"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
ElhJN4gQopjEMsxk4/r/W5iKpqBpuDZOJYKIRkKbNBnXSUI433u0maZnbfQp
xSnBOqoL+3lqonEMd3b6QEPrmvNyD2YzH13taS5+6ASmJeY5c073Qk+q+OG0
AiZcPyKQ/rAC5/NHd2XoVAFwZqUm1pcAmKSXxd/H/M6S055Sc/wpRKXXJZwo
8YfMoESfFYkToNq+1Gqtl17n/p1yRotME52LZpydcXVmP3W/cJFQu8DShd75
FXHVuP4vyl8fl+zpCdLpQaGEE8A+hfmyErMuenwbTweRRmwnTMmk4etn43n+
38KQzwzVeYGEK5FKTB/LmxbM0ZhlIT1508yCrByifC8I/IbufHoqy6zq8rtf
+bICZGo+l15pBpicFEk7gOs4lJwRU43bwsyviRrHACwyIEEe610wIyhhMm4p
ueap0eUAQrmJqbW4nX5UPWMvto+86HehuenXwczlpqNRCMCMsHL/U2kAV7wr
3U5HLL+urdWkvmTtVskFG19o9CzjCZgT0uXMMF33ucbFwmrBtpSnfFM2C9rz
R8qJYCuejD1eBuf/D9Ac0vfRjeN/Qws6ifPlRYQyrpVWIEEkzm7KFsbez+9b
PPNodVXjA73H7l3Z79YzAzpV78U8r2N0XZ53fuUdb3jq5+BZFAWwM21PPL1w
ECLCJvlPSMB5QMK0qBzMFzmpK+OmY3+3P+NZO/06QHnT7pN9NwHUmuJP2HQw
QeqMVc2JG3TQLEk4cvgUwF7/IE+d6G76Oq/VLs5R2ox+lwyn7kDfZxIcBuxy
Ez5JPmSpo37C1qkl2MNP5uWYE8geyhrLYj2tDPkiFzyOOTiSTcfZy7jG/zEs
RYvQMuSPbhNtxDsiGcfOrUQisYwaYTXHnM0hoMj8xZfH4p8BLjxIv017foZB
DwsJrMd6rg+8480fC7A2oz5xJfbvuU6vbMJx3Xbe77L7KxqA+8Xms023ARQf
1T5c+gbng1cHzyd1Ahxv4TvNietC+RaDU+53AFaVdByxOe0OCwt1smPqeCDA
euu+4IOXGBw8T7km83WtsCbpkoKxN2dhOYue/bcLNmZIH61B9LHtkXWrv/l1
2XH8gIuYCTpQHLEJbUG78DYQQJBJkRPDYyhRzJS6GxyJLjEHcwHmWzqYBjhF
fNiR6hDfjP07OZDi4xqTAzF+eh4XsN7FikKOvK0BmNXV8aDpGeb9br7fzj8H
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
tz/eLxxLxE8fxa8n/wVjgC2K
      "], {{0, 64.}, {64., 0}}, {0, 65535},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Bit16", ColorSpace -> "RGB", Interleaving -> True, 
      MetaInformation -> <|
       "Source" -> "http://pokemon.wikia.com/wiki/Hitmonchan", "URL" -> 
        "http://www.wolframcdn.com/waimage/hset080/0c2/\
0c2bd85e04f6c823c2716b29adbb322d_v001s.png"|>],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64., 64.},
    PlotRange->{{0, 64.}, {0, 64.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
Uwvf7utwjV39e5HfC///B/SUDlU=
      "], {{0, 64.}, {64., 0}}, {0, 65535},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Bit16", ColorSpace -> "RGB", Interleaving -> True, 
      MetaInformation -> <|
       "Source" -> "http://pokemon.wikia.com/wiki/Wormadam", "URL" -> 
        "http://www.wolframcdn.com/waimage/hset080/95b/\
95b254c55ff3e6f10f8bd2d983fa34f7_v001s.png"|>],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64., 64.},
    PlotRange->{{0, 64.}, {0, 64.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
Pvd8xGyspf+WyfvT5L/i/zeFCPqR
      "], {{0, 64.}, {64., 0}}, {0, 65535},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Bit16", ColorSpace -> "RGB", Interleaving -> True, 
      MetaInformation -> <|
       "Source" -> "http://pokemon.wikia.com/wiki/Lileep", "URL" -> 
        "http://www.wolframcdn.com/waimage/hset080/df0/\
df033bdf7d0626ffbbc9c5cfb26e1510_v001s.png"|>],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64., 64.},
    PlotRange->{{0, 64.}, {0, 64.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
l9/ld/ldfpff5f98+V8w73lt
      "], {{0, 64.}, {64., 0}}, {0, 65535},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Bit16", ColorSpace -> "RGB", Interleaving -> True, 
      MetaInformation -> <|
       "Source" -> "http://pokemon.wikia.com/wiki/Electrike", "URL" -> 
        "http://www.wolframcdn.com/waimage/hset080/265/\
26538ba8301ba93270b3805caeaf0541_v001s.png"|>],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64., 64.},
    PlotRange->{{0, 64.}, {0, 64.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
D59Dj1zLH4zo3/Jv+ZeQ/wXttTQz
      "], {{0, 64.}, {64., 0}}, {0, 255},
      ColorFunction->RGBColor,
      ImageResolution->{72, 72}],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", Interleaving -> True, 
      MetaInformation -> <|
       "Source" -> 
        "http://pokemon.wikia.com/wiki/File:Zygarde_Complete_Forme.png", 
        "URL" -> 
        "http://www.wolframcdn.com/waimage/hset080/c7f/\
c7f01f081093d33978256f599631f4b8_v001s.jpg"|>],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64., 64.},
    PlotRange->{{0, 64.}, {0, 64.}}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8551026415706983`*^9, 3.8551026495479403`*^9}, {
  3.855102682370116*^9, 3.8551026850731745`*^9}, {3.8551028035250435`*^9, 
  3.85510280960863*^9}, {3.8551029276255217`*^9, 3.8551029635744367`*^9}, {
  3.855103025282883*^9, 3.8551030372350426`*^9}, {3.8551030976646957`*^9, 
  3.8551031307495966`*^9}},
 CellLabel->"Out[90]=",ExpressionUUID->"2e490647-a929-4845-a70e-0646a9a293ed"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"generator", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"LinearLayer", "[", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", "100"}], "]"}], ",", 
      RowBox[{"NetTake", "[", 
       RowBox[{
        RowBox[{
        "NetModel", "[", 
         "\"\<CycleGAN Horse-to-Zebra Translation Trained on ImageNet \
Competition Data\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", "All"}], "}"}]}], "]"}], ",", 
      RowBox[{"ResizeLayer", "[", 
       RowBox[{"{", 
        RowBox[{"224", ",", "224"}], "}"}], "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", "\"\<Image\>\"", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.855103852642904*^9},ExpressionUUID->"dfe18f5d-cfbb-4e32-926c-\
665dd52b4107"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"discriminator", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "NetModel", "[", "\"\<EfficientNet Trained on ImageNet\>\"", "]"}], ",", 
     RowBox[{"AggregationLayer", "[", 
      RowBox[{"Max", ",", "1"}], "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8551024658186064`*^9, 3.8551024853964806`*^9}, {
  3.8551037958035645`*^9, 
  3.8551037966627207`*^9}},ExpressionUUID->"34d63d2f-aac0-4aef-ae05-\
71e974f656c3"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "stem_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 3, 3, 
                    3}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    3|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block1a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 32, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    1|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{8, 32}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {8}, 
                    "$OutputSize" -> 8, "$InputSize" -> 32, 
                    "$InputDimensions" -> {32}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {8}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 8}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {32}, 
                    "$OutputSize" -> 32, "$InputSize" -> 8, 
                    "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {32}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 32, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{16}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{16}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{16}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 16, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {96, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 96, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {96, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {4}, 
                    "$OutputSize" -> 4, "$InputSize" -> 96, 
                    "$InputDimensions" -> {96}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {4}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {96}, 
                    "$OutputSize" -> 96, "$InputSize" -> 4, 
                    "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {96}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{24, 96, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    96|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 24, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{6, 144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{6}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {6}, 
                    "$OutputSize" -> 6, "$InputSize" -> 144, 
                    "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 6}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {144}, 
                    "$OutputSize" -> 144, "$InputSize" -> 6, 
                    "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{144, 56, 56},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{24, 144, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.025, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block3a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 24, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{6, 144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{6}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {6}, 
                    "$OutputSize" -> 6, "$InputSize" -> 144, 
                    "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 6}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {144}, 
                    "$OutputSize" -> 144, "$InputSize" -> 6, 
                    "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{144, 28, 28},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{40, 144, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block3b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 40, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {10}, 
                    "$OutputSize" -> 10, "$InputSize" -> 240, 
                    "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {240}, 
                    "$OutputSize" -> 240, "$InputSize" -> 10, 
                    "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{240, 28, 28},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{40, 240, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.05, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 40, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {10}, 
                    "$OutputSize" -> 10, "$InputSize" -> 240, 
                    "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {240}, 
                    "$OutputSize" -> 240, "$InputSize" -> 10, 
                    "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{240, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 240, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block4b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 480, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.07500000000000001, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 480, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.08750000000000001, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 480, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block5b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 672, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.1125, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 672, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.125, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 672, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 672|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block6b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.15000000000000002`, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.1625, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6d" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.17500000000000002`, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block7a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{320, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 320, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 320,
                     1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1280, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 320, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 320|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1280}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1280}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1280}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1280, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1280, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "avg_pool" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_dropout" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "predictions" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1000, 
                    1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1000}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1000}, "$OutputSize" -> 1000, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1000}, 
                    NeuralNetworks`RealT]|>|>, 
                    "predictions_activation" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1000}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1000}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions_activation", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{224, 224}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, 
                    "MeanImage" -> {0.48500001430511475`, 0.4560000002384186, 
                    0.4059999883174896}, 
                    "VarianceImage" -> {0.2290000021457672, 
                    0.2240000069141388, 0.22499999403953552`}, "$Version" -> 
                    "13.0.3", "DataTransposed" -> False|>|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "26", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1000\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8551023532158623`*^9, 3.855102489422266*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"c11f5270-17d3-4947-9dd0-4a62621357ba"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"gan", "=", 
   RowBox[{"NetGANOperator", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"generator", ",", "discriminator"}], "}"}], ",", 
     "\"\<JensenShannon\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.85510244927822*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"87880bc8-5661-4c95-9139-814d5dfc09bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ganAsGraph", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Generator\>\"", "\[Rule]", 
       RowBox[{"NetReplacePart", "[", 
        RowBox[{"generator", ",", 
         RowBox[{"LearningRateMultipliers", "\[Rule]", 
          RowBox[{"-", "1"}]}]}], "]"}]}], ",", 
      RowBox[{"\"\<Discriminator\>\"", "->", 
       RowBox[{"NetInsertSharedArrays", "[", "discriminator", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<FooledDiscriminator\>\"", "\[Rule]", 
       RowBox[{"NetInsertSharedArrays", "[", "discriminator", "]"}]}], ",", 
      RowBox[{"\"\<LossReal\>\"", "\[Rule]", 
       RowBox[{"ElementwiseLayer", "[", 
        RowBox[{"Function", "[", 
         RowBox[{"-", 
          RowBox[{"Log", "[", "#", "]"}]}], "]"}], "]"}]}], ",", 
      RowBox[{"\"\<LossFake\>\"", "\[Rule]", 
       RowBox[{"ElementwiseLayer", "[", 
        RowBox[{"Function", "[", 
         RowBox[{"-", 
          RowBox[{"Log", "[", 
           RowBox[{"1", "-", "#"}], "]"}]}], "]"}], "]"}]}]}], "|>"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Sample\>\"", "]"}], "\[Rule]", 
       RowBox[{"\"\<Discriminator\>\"", "\[Rule]", 
        RowBox[{"\"\<LossReal\>\"", "\[Rule]", 
         RowBox[{"NetPort", "[", "\"\<LossReal\>\"", "]"}]}]}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Latent\>\"", "]"}], "\[Rule]", 
       RowBox[{"\"\<Generator\>\"", "\[Rule]", 
        RowBox[{"\"\<FooledDiscriminator\>\"", "\[Rule]", 
         RowBox[{"\"\<LossFake\>\"", "\[Rule]", 
          RowBox[{"NetPort", "[", "\"\<LossFake\>\"", "]"}]}]}]}]}], ",", 
      RowBox[{"\"\<Generator\>\"", "\[Rule]", 
       RowBox[{"NetPort", "[", "\"\<GeneratedFake\>\"", "]"}]}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8551024192227635`*^9, 3.855102432390526*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"9db64be9-282f-4f69-8dd4-fc5b4ded1777"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Latent\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {
                    0.5000100083734051, -1.5000099547836105`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Generator\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {
                    1.5000100083734047`, -1.5000099815785075`}], 
                    
                    Offset[{0, -15.5}, {
                    1.5000100083734047`, -1.5000099815785075`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Sample\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {
                    0.5000100083734051, -2.5000300787100085`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Discrimin..\"", "\"Discriminator\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Discriminator", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {
                    1.5000100083734051`, -2.5000301055049055`}], 
                    
                    Offset[{0, -15.5}, {
                    1.5000100083734051`, -2.5000301055049055`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"LossReal\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {
                    2.5000100083734047`, -2.5000301322998024`}], 
                    
                    Offset[{0, -13.5}, {
                    2.5000100083734047`, -2.5000301322998024`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"FooledDis..\"", "\"FooledDiscriminator\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "FooledDiscriminator", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {
                    2.5000100083734047`, -1.5000100083734045`}], 
                    
                    Offset[{0, -15.5}, {
                    2.5000100083734047`, -1.5000100083734045`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"LossFake\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {
                    3.5000100083734043`, -1.5000100351683017`}], 
                    
                    Offset[{0, -13.5}, {
                    3.5000100083734043`, -1.5000100351683017`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Generated..\"", "\"GeneratedFake\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "GeneratedFake", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {
                    2.5000100351683017`, -0.5000100083734049}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"LossFake\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {
                    4.500010008373404, -1.5000100619631986`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"LossReal\"", TraditionalForm], 
                    Offset[{0, -7}, {3.5000100083734043`, -2.5000301590947}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"100\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 5.499999999999999}, {
                    1.050010008373405, -1.500009969520804}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"224\"", 
                    "\"224\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 5.499999999999997}, {
                    1.0500100083734052`, -2.5000300934472017`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 5.499999999999999}, {
                    2.050010008373405, -2.5000301202420987`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 5.499999999999999}, {
                    3.0500100083734045`, -1.500010023110598}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"224\"", 
                    "\"224\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087192318316, 3.8890874007337044`}, {
                    2.050010023110598, -0.9500099963157009}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334008,
                     0.7071067622396938}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"224\"", 
                    "\"224\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 5.499999999999997}, {
                    2.0500100083734045`, -1.500009996315701}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 5.499999999999999}, {
                    4.0500100083734045`, -1.500010049905495}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193576586097`*^-7, 5.499999999999999}, {
                    3.0500100083734045`, -2.5000301470369957`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897411974723`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{0.5000100083734051, -1.5000099547836105`}, {
                    1.5000100083734047`, -1.5000099815785075`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 100\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Latent\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 100\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Latent", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{0.5000100083734051, -2.5000300787100085`}, {
                    1.5000100083734051`, -2.5000301055049055`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Sample\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Sample", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{1.5000100083734051`, -2.5000301055049055`}, {
                    2.5000100083734047`, -2.5000301322998024`}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{2.5000100083734047`, -1.5000100083734045`}, {
                    3.5000100083734043`, -1.5000100351683017`}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{1.5000100083734047`, -1.5000099815785075`}, {
                    2.5000100351683017`, -0.5000100083734049}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"GeneratedFake\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "GeneratedFake"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{1.5000100083734047`, -1.5000099815785075`}, {
                    2.5000100083734047`, -1.5000100083734045`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{3.5000100083734043`, -1.5000100351683017`}, {
                    4.500010008373404, -1.5000100619631986`}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossFake\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossFake"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{2.5000100083734047`, -2.5000301322998024`}, {
                    3.5000100083734043`, -2.5000301590947}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossReal\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossReal"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> False]], {
                    1.050010008373405, -1.500009969520804}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 100\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Latent\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 100\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Latent", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> False]], {
                    1.0500100083734052`, -2.5000300934472017`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Sample\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Sample", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> False]], {
                    2.050010008373405, -2.5000301202420987`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> False]], {
                    3.0500100083734045`, -1.500010023110598}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> False]], {
                    2.050010023110598, -0.9500099963157009}, {-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"GeneratedFake\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    "GeneratedFake"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> False]], {
                    2.0500100083734045`, -1.500009996315701}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> False]], {
                    4.0500100083734045`, -1.500010049905495}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossFake\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    "LossFake"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> False]], {
                    3.0500100083734045`, -2.5000301470369957`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897411974716`*^-8}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossReal\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    "LossReal"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0.5000100083734051, -1.5000099547836105`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Latent\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Latent", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], {
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {
                    1.5000100083734047`, -1.5000099815785075`}], 
                    
                    Offset[{-12.5, -12.5}, {
                    1.5000100083734047`, -1.5000099815785075`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {
                    1.5000100083734047`, -1.5000099815785075`}], 
                    
                    Offset[{12.5, 12.5}, {
                    1.5000100083734047`, -1.5000099815785075`}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {
                    1.5000100083734047`, -1.5000099815785075`}], 
                    Offset[{-10.5, -10.5}, {
                    1.5000100083734047`, -1.5000099815785075`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {
                    1.5000100083734047`, -1.5000099815785075`}], 
                    
                    Offset[{10.5, 10.5}, {
                    1.5000100083734047`, -1.5000099815785075`}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {
                    1.5000100083734047`, -1.5000099815785075`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Generator\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Generator", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0.5000100083734051, -2.5000300787100085`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Sample\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Sample", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], {
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {
                    1.5000100083734051`, -2.5000301055049055`}], 
                    
                    Offset[{-12.5, -12.5}, {
                    1.5000100083734051`, -2.5000301055049055`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {
                    1.5000100083734051`, -2.5000301055049055`}], 
                    
                    Offset[{12.5, 12.5}, {
                    1.5000100083734051`, -2.5000301055049055`}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {
                    1.5000100083734051`, -2.5000301055049055`}], 
                    
                    Offset[{-10.5, -10.5}, {
                    1.5000100083734051`, -2.5000301055049055`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {
                    1.5000100083734051`, -2.5000301055049055`}], 
                    
                    Offset[{10.5, 10.5}, {
                    1.5000100083734051`, -2.5000301055049055`}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {
                    1.5000100083734051`, -2.5000301055049055`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Discriminator\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Discriminator", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{2.5000100083734047`, -2.5000301322998024`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm1tIVEEYxy27+NLlISiCguwhCozKh65SaZsVG4VpRFG658zM2S3Ucs3q
JbF6CLo8FHRDC7I9M54eggIrCKKeqrciukBFUFEvQUVQQbh9c1xtz9mz7a7r
OXPG/MMICs7++fnNzDfffM5QGqvIyIKCgmgRfKkK7VvZ1BQ6sGkifFPTEI1o
DRitbWjGGm5apBTCD0thbIQxCsaqisb3BLN4/yDGsoJhZa2yMnw3mR/GXXtE
e5JJpaXVFyzxhygV7UkmFRcv2Wvlx16J9iSTCgvHbMSI9iQzVFV9smhfEikI
/B4m8wsjGhRtSiIFYc2etq3hNtGmJFJQQ2yHjV+3aFMSKaiqdLaFH2Y9ok1J
JHOvA2afLAxVtl60MUnUy4+wM9Y8ml4UbUwSmfw0VQ/Y8ugvoo1Jov5cBbh9
sN6F2RGRxiTRX372PAbTWyKNSaJ+frDnLbGdw3FNZUtFmpNAlrsG3EVuWs8R
posyJoks/BDc3ewxiJBeLsqcBEq568I++MDG8L4IY5IohR9CrNIeg8B0twhz
Esix1gL7YGfqOo6Vem1OAjnyi4RixcDsu+Us4XUucn601wZ9rrS1PrgDh+wx
iJHOvDQngf5ZK4V9r8NhLzztlTkJlLHWDOv2nkNO88gLcxIoIz9CjOlwl3uT
Gof0nBcGfa6s3joi6tW5EIcfU/dDen3bts7xbpv0sbJ+KyJEX4jtNZre/fB5
GNEyN036WDm9tWmhzjmcVwpDs2ZN97tl0sfK+a2SkNgkiMObTgwxYncIYQvc
MOpTDfitF+LwpGMc8roXZkdraowxg2nUp+JvvcGBjpKS4PHVgei3NZUtcfsI
rIp+XjCv+mw+8/t49CnvXoNdij4V1i1LF4swnmnIUPP9HJ9q0Ho1CKFbIZ95
nZ4j/cXrOENsXQ9qr0s8Hh+BEGsDVr/TckT0C9xfjvF3+8H8bEFypVeoro5O
S32PcmLJuuEs3+KGB4/kaq8VrOmZGqanMnLE9DOwPKOpdIWbflyQJ71qO2uN
KZAXHkrpE3Fm+QZi8gSS407jea9foq54PzNHc7yDXPIs78fxae1WWK8kv6ck
cvAsYjJxfmN2A36nXtOMOaJ82+SLXlNYqxuAzxUYP7KMS3Odw1negTHdzmts
gqz7gl+feG4Iuc1miLEYMPqaPUvzrf9FL09dCSvGLI8s+4qfXarK1pl5EGKv
cmGZqE1+BJ7XeF2I9wAoSvs4Fyz6ml+yYI2WwDkSNXNGxH7myjMxHvPeRoK6
dsF8i2trLxXlaUsafslqbW0dCbllBbA4nHif6RkgT34fegJ/k8swV7OmGoEc
/39DSn521dd3j03wPAgsbue6dzqMD3wenodi3KXw2nuad4ohwc9JYUWfD3tf
xFyvmD3Nk2ffmf+W96glfcyQ5WcX7HcTwsgoh/O5hfcBAI+XA+WYNO1/w89J
nCnGseWEdDUAl3bYCx9BfGU8m5Km+K/5DWtYMusPDr9Vbw==
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {
                    2.5000100083734047`, -2.5000301322998024`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossReal\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossReal", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], {
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {
                    2.5000100083734047`, -1.5000100083734045`}], 
                    
                    Offset[{-12.5, -12.5}, {
                    2.5000100083734047`, -1.5000100083734045`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {
                    2.5000100083734047`, -1.5000100083734045`}], 
                    
                    Offset[{12.5, 12.5}, {
                    2.5000100083734047`, -1.5000100083734045`}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {
                    2.5000100083734047`, -1.5000100083734045`}], 
                    
                    Offset[{-10.5, -10.5}, {
                    2.5000100083734047`, -1.5000100083734045`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {
                    2.5000100083734047`, -1.5000100083734045`}], 
                    
                    Offset[{10.5, 10.5}, {
                    2.5000100083734047`, -1.5000100083734045`}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {
                    2.5000100083734047`, -1.5000100083734045`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"FooledDiscriminator\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["FooledDiscriminator", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{3.5000100083734043`, -1.5000100351683017`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm11oFFcUx5dWiqQ+1IRSkIZaQeJTaQ3Fj9gE8cGPxg8iQaVpS2buPbPr
SgqJSRRE31RKrYL4EBHExJ17d4RUS9v040EotTSgbyottA+FQqGtSqFvrdj/
nWzCZnezzszO7Mxs5g8nJCG5878/zpx7Ti55Vfugh55JpVJDS/Ghp3908+Bg
/9G9L+CL3oGhjDHA2faBw9zgg+u1Z/HNdsQexJLUolR3Lb9MurmNuHzil5kY
qiZ+nIvjCT/vIiY/S/h5F/j9mfDzJqLcGsUu4edNODveT/jVwI+JCwk/7/xw
9t5O+Hnjl8nkls+yS/i5F5FkCT9b3vhx8WXCz5Zrfppmrihml/BzJyJzoJgd
zpHpIIzFRK75gdeP8/mZI0EYi4lc8SvumWeDsYmXgzIXA7niV9zz2YEeOihj
MZFjfkQiU5p7agYO0lwM5IifrlvN4PXX/NyT40Gbi4Ec8eNcXpp3ZjD5r2GI
lQF7i4Oeys9gQi9/b8WRepiLgaryQ6+3rowdkz/Uy1wMtCA/e85g8ufyfiXX
Xk+DEVdFftl3r7Sg5k2X514+W2+DEVcZP103X0Le3SplZ3B5JgyDEdc8fppm
vQ1WdyvUPCssgxHXHD/MsbuIi0dl7LicDNNgxGXzm70HLw3UwGthG4yyWltf
z+Dd/GoBdmNh+4uyMPuPbts6UsatwO5o2P6iKtLlTrC7oziV8uNM/I55Y3cN
y3c3aqxatXG4qys9rZjNRvvavXOfd3bSd83NK9/zuH7DijHxljoHKr2nM/kn
HiAfKWyfUROR3FN6T1YaHRu1qf5+68WwvUZF2exkC3JpEHXsXjVuOHO/MHTZ
kWrwd8+p0L9tR65drcps5ly9mWaimNmi5ceYXI9c+wjxqwNuU8i3HRWWWVT8
DEN2gMWHYPLT05gV4rLiXGXJhubX1zf+POmiBxwuoqb95pDZfdUbq7+jOHhE
w/FDfr1JLD8KBt845KXuI/4hdUdBYovLx8WeH/LkNdT/Qwj0aOIPp8zws/+p
vg6x/8SJm17//SJW/NQ+iaxNyK1hxCfueNl59jc4m4yZB4g+bfLBUqT5adpE
G+r3O+i3zqF+fY/9P3bDqzCT3gOzs1hnawAWI8NPsUKt38e5eRr7/dqei1yy
KryXD+x5i+XThpFbHbDtuvM7eNBaRpTboGZG5NV57Plb9V55YyUL86e8gXlr
SJ0ddd5OYPyIxprUXR1Rvg/7O2XvscJ9nuvAGlzNCszMapr5RlD+HcpXftjb
x9jb59jnLzVzmqn3D+0+hImTap5Xd6p++vVB/vKriRfOUrBS84HB8gfSmtXm
p7eAFAo/rnp8LvLoI46peytNu/qKnz7qqKD5qTnzOs7Ck6SjDpJc29trPefn
M0NWZPqXRIlq1f/INEev
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {
                    3.5000100083734043`, -1.5000100351683017`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossFake\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossFake", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.5000100351683017`, -0.5000100083734049}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"GeneratedFake\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["GeneratedFake", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{4.500010008373404, -1.5000100619631986`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossFake\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossFake", Bold]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{3.5000100083734043`, -2.5000301590947}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossReal\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossReal", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{0.5000100083734051, -1.5000099547836105`}, {
                    1.5000100083734047`, -1.5000099815785075`}, {
                    0.5000100083734051, -2.5000300787100085`}, {
                    1.5000100083734051`, -2.5000301055049055`}, {
                    2.5000100083734047`, -2.5000301322998024`}, {
                    2.5000100083734047`, -1.5000100083734045`}, {
                    3.5000100083734043`, -1.5000100351683017`}, {
                    2.5000100351683017`, -0.5000100083734049}, {
                    4.500010008373404, -1.5000100619631986`}, {
                    3.5000100083734043`, -2.5000301590947}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 8, 25, 21, 25, 21, 8, 8, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {281.49999999999994`, 158.50110534223253`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29., 32.500000000000014`}, {
                    29.499997052561298`, 19.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Sample\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Sample\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Sample"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Sample\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Sample"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Latent\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Latent\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Latent"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Latent\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Latent"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 100\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GeneratedFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GeneratedFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GeneratedFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GeneratedFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GeneratedFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossReal\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossReal\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossReal"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossReal\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossReal"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Generator" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{524288, 100}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{524288}]|>,
                     "Parameters" -> <|
                    "OutputDimensions" -> {128, 64, 64}, "$OutputSize" -> 
                    524288, "$InputSize" -> 100, 
                    "$InputDimensions" -> {100}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 64}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Chain", "Nodes" -> <|
                    "1" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Total", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{128, 64, 64},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}|>, 
                    "4" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Chain", "Nodes" -> <|
                    "1" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Total", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{128, 64, 64},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}|>, 
                    "5" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Chain", "Nodes" -> <|
                    "1" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Total", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{128, 64, 64},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}|>, 
                    "6" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Chain", "Nodes" -> <|
                    "1" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Total", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{128, 64, 64},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}|>, 
                    "7" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Chain", "Nodes" -> <|
                    "1" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, "KernelSize" -> 
                    {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 
                    0}}, "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "ChannelGroups" -> 1, "$InputSize" -> {66, 66}, 
                    "$OutputSize" -> {64, 64}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 66, 66}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Total", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{128, 64, 64},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}|>, 
                    "8" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Chain", "Nodes" -> <|
                    "1" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Total", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{128, 64, 64},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}|>, 
                    "9" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Chain", "Nodes" -> <|
                    "1" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Total", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{128, 64, 64},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}|>, 
                    "10" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Chain", "Nodes" -> <|
                    "1" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Total", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{128, 64, 64},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}|>, 
                    "11" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Chain", "Nodes" -> <|
                    "1" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {128, 64, 64}, 
                    "$OutputSize" -> {128, 66, 66}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    66, 66}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {66, 66}, "$OutputSize" -> {64, 64}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 66, 
                    66}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {128, 64, 64}, 
                    "$StatsDimensions" -> {128}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{128, 64, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{128, 
                    64, 64}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Total", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{128, 64, 64},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}|>, 
                    "12" -> <|"Type" -> "Deconvolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 64, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {129, 129}, 
                    "Dimensionality" -> 2, "Dilation" -> {1, 1}, 
                    "$WeightsOutputChannels" -> 64|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64, 129, 129}, 
                    NeuralNetworks`RealT]|>|>, 
                    "13" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[2, -1], 
                    Span[2, -1]}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 129, 129}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]|>|>, 
                    "14" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {64, 128, 128}, 
                    "$StatsDimensions" -> {64}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]|>|>, 
                    "15" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 128}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]|>|>, 
                    "16" -> <|"Type" -> "Deconvolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 32, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 32, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Interleaving" -> 
                    False, "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {128, 128}, "$OutputSize" -> {257, 257}, 
                    "Dimensionality" -> 2, "Dilation" -> {1, 1}, 
                    "$WeightsOutputChannels" -> 32|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 257, 257}, 
                    NeuralNetworks`RealT]|>|>, 
                    "17" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[2, -1], 
                    Span[2, -1]}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 257, 257}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 256, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "18" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|"Epsilon" -> 0.00001, 
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "$Dimensions" -> {32, 256, 256}, 
                    "$StatsDimensions" -> {32}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 256, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "19" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 256, 256}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 256, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "20" -> <|"Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {3, 3}, {3, 
                    3}}, "Padding" -> "Reflected", "$Rank" -> 3, 
                    "$InputSize" -> {32, 256, 256}, 
                    "$OutputSize" -> {32, 262, 262}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 262, 262}, 
                    NeuralNetworks`RealT]|>|>, 
                    "21" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3, 32, 7, 7}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{3}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 3, 
                    "KernelSize" -> {7, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "ChannelGroups" -> 1, 
                    "$InputSize" -> {262, 262}, "$OutputSize" -> {256, 256}, 
                    "$WeightsInputChannels" -> 32|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 262, 262}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3, 256, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "22" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.5 + 0.5 Tanh[#]& ], 
                    "$Dimensions" -> {3, 256, 256}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3, 256, 256}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3, 256, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Resize", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{224, 224}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$Channels" -> 3, 
                    "$InputSize" -> {256, 256}, "$OutputSize" -> {224, 224}|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "TrainingParameters" -> <|
                    "LearningRateMultipliers" -> -1|>|>, 
                    "Discriminator" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"stem_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/stem_conv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    3|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/stem_bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/stem_bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block1a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block1a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 32, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    1|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block1a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block1a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block1a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block1a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {8}, 
                    "$OutputSize" -> 8, "$InputSize" -> 32, 
                    "$InputDimensions" -> {32}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {8}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block1a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block1a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {32}, 
                    "$OutputSize" -> 32, "$InputSize" -> 8, 
                    "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {32}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block1a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block1a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block1a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{16}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{16, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2a/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block2a/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {96, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 96, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 112,
                     112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {96, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block2a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {4}, 
                    "$OutputSize" -> 4, "$InputSize" -> 96, 
                    "$InputDimensions" -> {96}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {4}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block2a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {96}, 
                    "$OutputSize" -> 96, "$InputSize" -> 4, 
                    "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {96}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{96, 
                    56, 56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{96, 56,
                     56}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    96|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block2a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{24, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2b" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2b/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2b/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block2b/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    144}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2b/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56,
                     56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2b/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2b/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    144}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block2b/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2b/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {6}, 
                    "$OutputSize" -> 6, "$InputSize" -> 144, 
                    "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {6}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block2b/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2b/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {144}, 
                    "$OutputSize" -> 144, "$InputSize" -> 6, 
                    "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{144, 56, 56},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2b/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2b/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block2b/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{24, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.025, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{24, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block3a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3a/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block3a/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    144}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{144, 
                    56, 56}, NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56,
                     56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    144}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block3a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {6}, 
                    "$OutputSize" -> 6, "$InputSize" -> 144, 
                    "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {6}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block3a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {144}, 
                    "$OutputSize" -> 144, "$InputSize" -> 6, 
                    "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{144, 28, 28},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block3a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{40, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block3b" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3b/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3b/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block3b/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    240}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3b/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28,
                     28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3b/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3b/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    240}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block3b/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3b/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {10}, 
                    "$OutputSize" -> 10, "$InputSize" -> 240, 
                    "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block3b/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3b/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {240}, 
                    "$OutputSize" -> 240, "$InputSize" -> 10, 
                    "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{240, 28, 28},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3b/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3b/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block3b/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{40, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.05, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{40, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{240, 
                    28, 28}, NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4a/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4a/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    240}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28,
                     28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    240}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {10}, 
                    "$OutputSize" -> 10, "$InputSize" -> 240, 
                    "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {240}, 
                    "$OutputSize" -> 240, "$InputSize" -> 10, 
                    "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{240, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4a/project_conv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{80, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block4b" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4b/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{480, 
                    14, 14}, NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4b/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4b/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4b/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14,
                     14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4b/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4b/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4b/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4b/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4b/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4b/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4b/project_conv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4b/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4b/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{80, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 
                    0.07500000000000001, "Method" -> "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{80, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4c" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4c/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4c/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4c/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4c/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14,
                     14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4c/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4c/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4c/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4c/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4c/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4c/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4c/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4c/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4c/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{80, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 
                    0.08750000000000001, "Method" -> "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{80, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> NetArray[<|
                    "Name" -> "1/block5a/expand_bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5a/expand_bn/Biases", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14,
                     14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block5a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    112}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{112, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block5b" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5b/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5b/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block5b/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5b/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14,
                     14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5b/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5b/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5b/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5b/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5b/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5b/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5b/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5b/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block5b/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    112}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{112, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1125, 
                    "Method" -> "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{112, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{112, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5c" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5c/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5c/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block5c/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5c/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14,
                     14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5c/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5c/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5c/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5c/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5c/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5c/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5c/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5c/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block5c/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    112}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{112, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.125, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{112, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{112, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6a/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6a/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{672,
                     7, 7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{672, 7,
                     7}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 672|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    192}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block6b" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6b/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6b/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6b/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6b/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6b/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6b/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6b/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6b/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6b/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6b/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    1152, 7, 7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152, 
                    7, 7}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6b/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6b/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6b/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    192}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 
                    0.15000000000000002`, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6c" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6c/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6c/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6c/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6c/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6c/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6c/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6c/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6c/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6c/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6c/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    1152, 7, 7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152, 
                    7, 7}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6c/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6c/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6c/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    192}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1625, 
                    "Method" -> "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6d" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6d/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6d/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6d/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6d/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6d/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6d/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6d/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6d/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6d/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6d/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    1152, 7, 7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152, 
                    7, 7}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6d/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6d/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6d/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    192}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 
                    0.17500000000000002`, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block7a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block7a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block7a/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block7a/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block7a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block7a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block7a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block7a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block7a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block7a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block7a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    1152, 7, 7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152, 
                    7, 7}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block7a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block7a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block7a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    320}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 320, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{320, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_conv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/top_conv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 1280, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 320, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 320|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/top_bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/top_bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1280, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1280, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "avg_pool" -> <|"Type" -> "Aggregation", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>|>, 
                    "top_dropout" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.2, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>|>, 
                    "predictions" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/predictions/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/predictions/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1000}, 
                    "$OutputSize" -> 1000, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]|>|>, 
                    "predictions_activation" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1000}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions_activation", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "FooledDiscriminator" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"stem_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/stem_conv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    3|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/stem_bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/stem_bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block1a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block1a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 32, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    1|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block1a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block1a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block1a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block1a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {8}, 
                    "$OutputSize" -> 8, "$InputSize" -> 32, 
                    "$InputDimensions" -> {32}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {8}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block1a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block1a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {32}, 
                    "$OutputSize" -> 32, "$InputSize" -> 8, 
                    "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {32}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block1a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block1a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block1a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{16}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{16, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2a/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block2a/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {96, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 112, 
                    112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 96, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 112,
                     112}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {96, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block2a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {4}, 
                    "$OutputSize" -> 4, "$InputSize" -> 96, 
                    "$InputDimensions" -> {96}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {4}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block2a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {96}, 
                    "$OutputSize" -> 96, "$InputSize" -> 4, 
                    "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {96}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{96, 
                    56, 56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{96, 56,
                     56}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    96|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block2a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{24, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2b" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2b/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2b/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block2b/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    144}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2b/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56,
                     56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2b/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2b/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    144}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block2b/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2b/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {6}, 
                    "$OutputSize" -> 6, "$InputSize" -> 144, 
                    "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {6}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block2b/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block2b/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {144}, 
                    "$OutputSize" -> 144, "$InputSize" -> 6, 
                    "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{144, 56, 56},
                     NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    144, 56, 56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{144, 
                    56, 56}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block2b/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block2b/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block2b/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{24, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.025, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{24, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block3a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3a/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block3a/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    144}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56, 
                    56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 56,
                     56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    144}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block3a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {6}, 
                    "$OutputSize" -> 6, "$InputSize" -> 144, 
                    "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {6}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block3a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {144}, 
                    "$OutputSize" -> 144, "$InputSize" -> 6, 
                    "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {144}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{144, 28, 28},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block3a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{40, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block3b" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3b/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3b/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block3b/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    240}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3b/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28,
                     28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3b/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3b/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    240}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block3b/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3b/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {10}, 
                    "$OutputSize" -> 10, "$InputSize" -> 240, 
                    "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block3b/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block3b/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {240}, 
                    "$OutputSize" -> 240, "$InputSize" -> 10, 
                    "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {240}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{240, 28, 28},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block3b/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block3b/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block3b/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{40, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.05, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{40, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4a/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4a/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    240}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{240, 
                    28, 28}, NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28, 
                    28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 28,
                     28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    240}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {10}, 
                    "$OutputSize" -> 10, "$InputSize" -> 240, 
                    "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {240}, 
                    "$OutputSize" -> 240, "$InputSize" -> 10, 
                    "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{240, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{80, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block4b" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4b/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4b/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4b/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{480, 
                    14, 14}, NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4b/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14,
                     14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4b/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4b/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4b/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4b/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4b/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4b/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4b/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4b/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4b/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{80, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 
                    0.07500000000000001, "Method" -> "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{80, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4c" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4c/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4c/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4c/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4c/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14,
                     14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4c/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4c/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4c/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4c/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block4c/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block4c/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block4c/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block4c/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block4c/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|"Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{80, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 
                    0.08750000000000001, "Method" -> "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{80, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5a/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block5a/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14,
                     14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    480}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block5a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    112}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{112, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block5b" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5b/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5b/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block5b/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5b/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14,
                     14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5b/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5b/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5b/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5b/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5b/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5b/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5b/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5b/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block5b/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    112}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{112, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1125, 
                    "Method" -> "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{112, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{112, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5c" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5c/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5c/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block5c/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5c/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14,
                     14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5c/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5c/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5c/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5c/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block5c/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block5c/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block5c/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block5c/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block5c/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    112}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{112, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.125, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{112, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{112, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6a/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6a/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 14, 
                    14}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    672}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{672,
                     7, 7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{672, 7,
                     7}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 672|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{672, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    192}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block6b" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6b/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6b/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6b/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6b/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6b/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6b/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6b/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6b/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6b/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6b/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    1152, 7, 7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152, 
                    7, 7}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6b/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6b/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6b/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    192}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 
                    0.15000000000000002`, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6c" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6c/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6c/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6c/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6c/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6c/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6c/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6c/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6c/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6c/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6c/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    1152, 7, 7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152, 
                    7, 7}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6c/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6c/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6c/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    192}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1625, 
                    "Method" -> "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6d" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6d/expand_conv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6d/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6d/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6d/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6d/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6d/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6d/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6d/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block6d/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block6d/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    1152, 7, 7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152, 
                    7, 7}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block6d/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block6d/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block6d/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    192}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 
                    0.17500000000000002`, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block7a" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block7a/expand_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{192, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block7a/expand_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block7a/expand_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block7a/dwconv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block7a/bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block7a/bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1152}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block7a/seBlock/se_reduce/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block7a/seBlock/se_reduce/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> NetArray[<|
                    "Name" -> "1/block7a/seBlock/se_expand/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/block7a/seBlock/se_expand/Biases",
                     "Array" -> Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|"Type" -> "Replicate", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Automatic, Automatic}], "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    1152, 7, 7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1152, 
                    7, 7}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_squeeze", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_reduce_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_activation", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_expand_reshape", 
                    "Inputs", "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Inputs", 
                    "2"] -> NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "se_excite", "Outputs", 
                    "Output"]}|>, "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/block7a/project_conv/Weights", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> None|>, "Parameters" -> <|
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{320, 7,
                     7}, NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/block7a/project_bn/Scaling", 
                    "Array" -> Automatic, "Dimensions" -> Automatic|>], 
                    "Biases" -> NetArray[<|"Name" -> 
                    "1/block7a/project_bn/Biases", "Array" -> Automatic, 
                    "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    320}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 320, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{320, 7, 
                    7}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_conv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/top_conv/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    None|>, "Parameters" -> <|
                    "OutputChannels" -> 1280, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 320, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 320|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NetArray[<|"Name" -> "1/top_bn/Scaling", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/top_bn/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1280, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1280, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "avg_pool" -> <|"Type" -> "Aggregation", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>|>, 
                    "top_dropout" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.2, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>|>, 
                    "predictions" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Name" -> "1/predictions/Weights", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>], "Biases" -> 
                    NetArray[<|"Name" -> "1/predictions/Biases", "Array" -> 
                    Automatic, "Dimensions" -> Automatic|>]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1000}, 
                    "$OutputSize" -> 1000, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]|>|>, 
                    "predictions_activation" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1000}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "predictions_activation", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "LossReal" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Minus[
                    Log[#]]& ], "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "LossFake" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Minus[
                    Log[
                    Subtract[1, #]]]& ], "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Sample" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{224, 224}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, 
                    "MeanImage" -> {0.48500001430511475`, 0.4560000002384186, 
                    0.4059999883174896}, 
                    "VarianceImage" -> {0.2290000021457672, 
                    0.2240000069141388, 0.22499999403953552`}, "$Version" -> 
                    "13.0.3", "DataTransposed" -> False|>, "Latent" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "GeneratedFake" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ColorSpace" -> 
                    "RGB", "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "$Dimensions" -> NeuralNetworks`ListT[2, 
                    NeuralNetworks`EitherT[{NeuralNetworks`SizeT, 
                    NeuralNetworks`MatchT[
                    Blank[NeuralNetworks`LengthVar]]}]], "$Channels" -> 3, 
                    "$Version" -> "13.0.3"|>, "LossFake" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "LossReal" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Discriminator", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Sample"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Generator", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Latent"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "FooledDiscriminator", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Generator", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "GeneratedFake"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Generator", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "LossReal", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Discriminator", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "LossFake", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "FooledDiscriminator", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "LossReal", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "LossFake", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Latent"], 
                    NeuralNetworks`NetPath["Nodes", "Generator"], 
                    NeuralNetworks`NetPath["Inputs", "Sample"], 
                    NeuralNetworks`NetPath["Nodes", "Discriminator"], 
                    NeuralNetworks`NetPath["Nodes", "LossReal"], 
                    NeuralNetworks`NetPath["Nodes", "FooledDiscriminator"], 
                    NeuralNetworks`NetPath["Nodes", "LossFake"], 
                    NeuralNetworks`NetPath["Outputs", "GeneratedFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Latent"], 
                    NeuralNetworks`NetPath["Nodes", "Generator"], 
                    NeuralNetworks`NetPath["Inputs", "Sample"], 
                    NeuralNetworks`NetPath["Nodes", "Discriminator"], 
                    NeuralNetworks`NetPath["Nodes", "LossReal"], 
                    NeuralNetworks`NetPath["Nodes", "FooledDiscriminator"], 
                    NeuralNetworks`NetPath["Nodes", "LossFake"], 
                    NeuralNetworks`NetPath["Outputs", "GeneratedFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <|
                    "1/block1a/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}], 
                    "1/block1a/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{32}], 
                    "1/block1a/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 1, 3, 3}], 
                    "1/block1a/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{16}], 
                    "1/block1a/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{16}], 
                    "1/block1a/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 32, 1, 1}], 
                    "1/block1a/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}], 
                    "1/block1a/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 8}], 
                    "1/block1a/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{8}], 
                    "1/block1a/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{8, 32}], 
                    "1/block2a/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], 
                    "1/block2a/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], 
                    "1/block2a/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 1, 3, 3}], 
                    "1/block2a/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], 
                    "1/block2a/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], 
                    "1/block2a/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 16, 1, 1}], 
                    "1/block2a/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{24}], 
                    "1/block2a/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{24}], 
                    "1/block2a/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{24, 96, 1, 1}], 
                    "1/block2a/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], 
                    "1/block2a/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 4}], 
                    "1/block2a/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], 
                    "1/block2a/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 96}], 
                    "1/block2b/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "1/block2b/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "1/block2b/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 1, 3, 3}], 
                    "1/block2b/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "1/block2b/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "1/block2b/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 24, 1, 1}], 
                    "1/block2b/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{24}], 
                    "1/block2b/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{24}], 
                    "1/block2b/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{24, 144, 1, 1}], 
                    "1/block2b/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "1/block2b/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 6}], 
                    "1/block2b/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{6}], 
                    "1/block2b/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{6, 144}], 
                    "1/block3a/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "1/block3a/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "1/block3a/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 1, 5, 5}], 
                    "1/block3a/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "1/block3a/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "1/block3a/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 24, 1, 1}], 
                    "1/block3a/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{40}], 
                    "1/block3a/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{40}], 
                    "1/block3a/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{40, 144, 1, 1}], 
                    "1/block3a/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "1/block3a/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 6}], 
                    "1/block3a/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{6}], 
                    "1/block3a/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{6, 144}], 
                    "1/block3b/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "1/block3b/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "1/block3b/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 1, 5, 5}], 
                    "1/block3b/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "1/block3b/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "1/block3b/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 40, 1, 1}], 
                    "1/block3b/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{40}], 
                    "1/block3b/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{40}], 
                    "1/block3b/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{40, 240, 1, 1}], 
                    "1/block3b/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "1/block3b/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 10}], 
                    "1/block3b/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}], 
                    "1/block3b/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 240}], 
                    "1/block4a/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "1/block4a/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "1/block4a/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 1, 3, 3}], 
                    "1/block4a/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "1/block4a/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "1/block4a/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 40, 1, 1}], 
                    "1/block4a/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], 
                    "1/block4a/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], 
                    "1/block4a/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 240, 1, 1}], 
                    "1/block4a/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "1/block4a/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 10}], 
                    "1/block4a/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}], 
                    "1/block4a/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 240}], 
                    "1/block4b/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block4b/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block4b/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 3, 3}], 
                    "1/block4b/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block4b/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block4b/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "1/block4b/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], 
                    "1/block4b/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], 
                    "1/block4b/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 480, 1, 1}], 
                    "1/block4b/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block4b/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], 
                    "1/block4b/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}], 
                    "1/block4b/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], 
                    "1/block4c/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block4c/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block4c/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 3, 3}], 
                    "1/block4c/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block4c/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block4c/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "1/block4c/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], 
                    "1/block4c/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], 
                    "1/block4c/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 480, 1, 1}], 
                    "1/block4c/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block4c/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], 
                    "1/block4c/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}], 
                    "1/block4c/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], 
                    "1/block5a/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block5a/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block5a/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 5, 5}], 
                    "1/block5a/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block5a/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block5a/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "1/block5a/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "1/block5a/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "1/block5a/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 480, 1, 1}], 
                    "1/block5a/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "1/block5a/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], 
                    "1/block5a/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}], 
                    "1/block5a/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], 
                    "1/block5b/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block5b/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block5b/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "1/block5b/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block5b/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block5b/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "1/block5b/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "1/block5b/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "1/block5b/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 672, 1, 1}], 
                    "1/block5b/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block5b/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], 
                    "1/block5b/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "1/block5b/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], 
                    "1/block5c/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block5c/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block5c/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "1/block5c/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block5c/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block5c/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "1/block5c/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "1/block5c/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "1/block5c/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 672, 1, 1}], 
                    "1/block5c/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block5c/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], 
                    "1/block5c/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "1/block5c/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], 
                    "1/block6a/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block6a/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block6a/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "1/block6a/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block6a/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block6a/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "1/block6a/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "1/block6a/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "1/block6a/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 672, 1, 1}], 
                    "1/block6a/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "1/block6a/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], 
                    "1/block6a/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "1/block6a/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], 
                    "1/block6b/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6b/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6b/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "1/block6b/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6b/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6b/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "1/block6b/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "1/block6b/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "1/block6b/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "1/block6b/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6b/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], 
                    "1/block6b/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}], 
                    "1/block6b/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], 
                    "1/block6c/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6c/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6c/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "1/block6c/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6c/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6c/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "1/block6c/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "1/block6c/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "1/block6c/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "1/block6c/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6c/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], 
                    "1/block6c/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}], 
                    "1/block6c/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], 
                    "1/block6d/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6d/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6d/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "1/block6d/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6d/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6d/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "1/block6d/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "1/block6d/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "1/block6d/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "1/block6d/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block6d/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], 
                    "1/block6d/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}], 
                    "1/block6d/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], 
                    "1/block7a/bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block7a/bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block7a/dwconv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 3, 3}], 
                    "1/block7a/expand_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block7a/expand_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block7a/expand_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "1/block7a/project_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{320}], 
                    "1/block7a/project_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{320}], 
                    "1/block7a/project_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{320, 1152, 1, 1}], 
                    "1/block7a/seBlock/se_expand/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "1/block7a/seBlock/se_expand/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], 
                    "1/block7a/seBlock/se_reduce/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}], 
                    "1/block7a/seBlock/se_reduce/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], 
                    "1/predictions/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1000}], 
                    "1/predictions/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1000, 1280}], 
                    "1/stem_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}], 
                    "1/stem_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{32}], 
                    "1/stem_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 3, 3, 3}], 
                    "1/top_bn/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], 
                    "1/top_bn/Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], 
                    "1/top_conv/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1280, 320, 1, 
                    1}]|>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8551024590047984`*^9, 3.8551025178769846`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"63f54432-ca7c-44b0-a56d-6f7572e6c570"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"deconvolutionBlock", "[", 
   RowBox[{"numhiddens_", ",", "size_"}], "]"}], ":=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DeconvolutionLayer", "[", 
      RowBox[{"numhiddens", ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "5"}], "}"}], ",", 
       RowBox[{"\"\<Stride\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], ",", 
       RowBox[{"PaddingSize", "\[Rule]", "1"}]}], "]"}], ",", 
     RowBox[{"PartLayer", "[", 
      RowBox[{"{", 
       RowBox[{"All", ",", 
        RowBox[{"1", ";;", "size"}], ",", 
        RowBox[{"1", ";;", "size"}]}], "}"}], "]"}], ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp"}], "}"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"generator", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NetChain", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"512", ",", "4", ",", "4"}], "}"}], ",", 
         RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp"}], "}"}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"deconvolutionBlock", "[", 
       RowBox[{"256", ",", "8"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"deconvolutionBlock", "[", 
       RowBox[{"128", ",", "16"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"deconvolutionBlock", "[", 
       RowBox[{"64", ",", "32"}], "]"}], ",", 
      RowBox[{"DeconvolutionLayer", "[", 
       RowBox[{"3", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}]}], ",", 
        RowBox[{"PaddingSize", "\[Rule]", "1"}], ",", 
        RowBox[{"\"\<Weights\>\"", "\[Rule]", "0"}]}], "]"}], ",", 
      RowBox[{"PartLayer", "[", 
       RowBox[{"{", 
        RowBox[{"All", ",", 
         RowBox[{"1", ";;", "64"}], ",", 
         RowBox[{"1", ";;", "64"}]}], "}"}], "]"}], ",", 
      RowBox[{"ElementwiseLayer", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Tanh", "[", "#", "]"}], "*", "0.5"}], "+", ".5"}], "&"}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "32"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", "\"\<Image\>\"", "]"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8551031683053465`*^9, 3.8551031948267236`*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"af513b03-43ad-4dce-8fef-f11f34668807"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{8192, 32}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8192}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {512, 4, 4}, "$OutputSize" -> 8192, 
                    "$InputSize" -> 32, "$InputDimensions" -> {32}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {4, 4}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 4, 4}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{512, 256, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 512, "$InputSize" -> {4, 4}, 
                    "$OutputSize" -> {9, 9}, "$WeightsOutputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 9, 9}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, 8], 
                    Span[1, 8]}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 9, 9}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {8, 8}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 8, 8}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{256, 128, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 256, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {17, 17}, "$WeightsOutputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, 16], 
                    Span[1, 16]}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {16, 16}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 16, 16}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{128, 64, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 128, "$InputSize" -> {16, 16}, 
                    "$OutputSize" -> {33, 33}, "$WeightsOutputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 33, 33}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, 32], 
                    Span[1, 32]}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 33, 33}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {32, 32}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 32, 32}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {64, 3, 5, 5}], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 3, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 64, "$InputSize" -> {32, 32}, 
                    "$OutputSize" -> {65, 65}, "$WeightsOutputChannels" -> 
                    3|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 65, 65}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, 64], 
                    Span[1, 64]}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 65, 65}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[0.5 + 0.5 Tanh[#]& ], 
                    "$Dimensions" -> {3, 64, 64}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ColorSpace" -> 
                    "RGB", "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "$Dimensions" -> NeuralNetworks`ListT[2, 
                    NeuralNetworks`EitherT[{NeuralNetworks`SizeT, 
                    NeuralNetworks`MatchT[
                    Blank[NeuralNetworks`LengthVar]]}]], "$Channels" -> 3, 
                    "$Version" -> "13.0.3"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "3", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]4\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]8\[Times]8\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]16\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]32\[Times]32\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]65\[Times]65\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PartLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]64\[Times]64\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    RowBox[{"0.5`", "\[VeryThinSpace]"}], "+", 
                    RowBox[{"0.5`", " ", 
                    RowBox[{"Tanh", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], 
                    "]"}]}]}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]64\[Times]64\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"image\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    194., {57.433593688416295`, 61.566406311583705`}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8551032059758434`*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"3c1b68fe-fc84-46ac-af7b-2b7d514fcb8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"convolutionBlock", "[", 
   RowBox[{"numhiddens_", ",", "size_"}], "]"}], ":=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"numhiddens", ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "5"}], "}"}], ",", 
       RowBox[{"\"\<Stride\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], ",", 
       RowBox[{"PaddingSize", "\[Rule]", "2"}]}], "]"}], ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     RowBox[{"ElementwiseLayer", "[", 
      RowBox[{
       RowBox[{"Max", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"0.2`", " ", "#1"}]}], "]"}], "&"}], "]"}]}], "}"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"discriminator", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ElementwiseLayer", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"2", "*", "#"}]}], "&"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"convolutionBlock", "[", 
       RowBox[{"64", ",", "32"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"convolutionBlock", "[", 
       RowBox[{"128", ",", "16"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"convolutionBlock", "[", 
       RowBox[{"256", ",", "8"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"convolutionBlock", "[", 
       RowBox[{"512", ",", "4"}], "]"}], ",", 
      RowBox[{"LinearLayer", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"\"\<Weights\>\"", "\[Rule]", "0"}], ",", 
        RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "LogisticSigmoid"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"64", ",", "64"}], "}"}], ",", "\"\<RGB\>\""}], "}"}], 
      "]"}]}]}], "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.8551032307728186`*^9, 3.855103251835826*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"2ff4ed6c-cf65-4c50-ab46-434f76d19660"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[-1 + 2 #& ], 
                    "$Dimensions" -> {3, 64, 64}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{64, 3, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {32, 32}, "$WeightsInputChannels" -> 3|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {32, 32}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Max[#, 0.2 #]& ], "$Dimensions" -> {64, 32, 32}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{128, 64, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {32, 32}, 
                    "$OutputSize" -> {16, 16}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {16, 16}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0.2 #]& ], 
                    "$Dimensions" -> {128, 16, 16}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{256, 128, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {16, 16}, 
                    "$OutputSize" -> {8, 8}, "$WeightsInputChannels" -> 128|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {8, 8}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0.2 #]& ], 
                    "$Dimensions" -> {256, 8, 8}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{512, 256, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {4, 4}, "$WeightsInputChannels" -> 256|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {4, 4}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0.2 #]& ], 
                    "$Dimensions" -> {512, 4, 4}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {1, 8192}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 8192, "$InputDimensions" -> {512, 4, 4}|>,
                     "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{64, 64}], "ColorSpace" -> 
                    "RGB", "ColorChannels" -> 3, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, 
                    "DataTransposed" -> False, "$Version" -> "13.0.3"|>|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]64\[Times]64\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"2", " ", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False]}]}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]64\[Times]64\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "3", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]32\[Times]32\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "3", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]16\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "3", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]8\[Times]8\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "3", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]4\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    191., {64.4335936884163, 68.5664063115837}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.855103258646765*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"87071601-375e-4262-ad40-89ffa3df5c27"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"autoencoder", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<compressor\>\"", "\[Rule]", 
       RowBox[{"NetTake", "[", 
        RowBox[{"discriminator", ",", 
         RowBox[{"{", 
          RowBox[{"All", ",", "5"}], "}"}]}], "]"}]}], ",", 
      RowBox[{"\"\<latent\>\"", "\[Rule]", 
       RowBox[{"NetChain", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"LinearLayer", "[", "32", "]"}], ",", 
          RowBox[{"BatchNormalizationLayer", "[", "]"}]}], "}"}], "]"}]}], 
      ",", 
      RowBox[{"\"\<generator\>\"", "\[Rule]", "generator"}]}], "|>"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8551032767191668`*^9, 3.8551032865556235`*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"47d8c7e4-4fa5-4486-9915-215fdd7275b9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"autoencoderTrainer", " ", "=", " ", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<autoencoder\>\"", "\[Rule]", "autoencoder"}], ",", 
       RowBox[{"\"\<MSE\>\"", " ", "\[Rule]", " ", 
        RowBox[{"MeanSquaredLossLayer", "[", "]"}]}]}], "|>"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<autoencoder\>\"", ",", 
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}]}], "}"}], "\[Rule]", 
       "\"\<MSE\>\""}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8551032883542747`*^9, 3.855103289180067*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"a8792696-2ce3-41d5-9dc6-f4394cfc70dc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"autoEncoderTrainResults", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"autoencoderTrainer", ",", "pokemons", ",", "All", ",", 
    RowBox[{"TargetDevice", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<GPU\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "500"}], ",", 
    RowBox[{"BatchSize", "\[Rule]", "32"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trained", "=", 
   RowBox[{"autoEncoderTrainResults", "[", "\"\<TrainedNet\>\"", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.854965873702213*^9, 3.8549658740561385`*^9}, {
  3.8549663667496996`*^9, 3.854966374039109*^9}, {3.8549664137604847`*^9, 
  3.854966413900205*^9}, {3.8551036673148003`*^9, 
  3.855103671400948*^9}},ExpressionUUID->"6492af9c-9b5e-47c8-b7a8-\
cb35d59051b8"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   TagBox["NetTrainResultsObject",
    "SummaryHead"], "NonInterpretableSummary"], 
  StyleBox["[", "NonInterpretableSummary"], 
  FrameBox[GridBox[{
     {
      ItemBox[
       FrameBox[
        StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
         StripOnInput->False,
         FontSize->12],
        FrameMargins->{{10, 5}, {-4, 2}},
        FrameStyle->None,
        StripOnInput->False],
       Alignment->{Left, Bottom},
       Background->RGBColor[0.96, 0.96, 0.96],
       Frame->{{False, False}, {True, False}},
       FrameStyle->Opacity[0.1],
       ItemSize->{Automatic, 1},
       StripOnInput->False]},
     {
      ItemBox[
       TagBox[
        FrameBox[
         TagBox[GridBox[{
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["summary"], 
                 TextCell["summary"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batches:"], 
                  TextCell["batches:"]], "16500"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["rounds:"], 
                  TextCell["rounds:"]], "500"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["time:"], 
                  TextCell["time:"]], 
                 InterpretationBox[
                  Cell["8.6min"], 
                  TextCell["8.6min"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["examples/s:"], 
                  TextCell["examples/s:"]], "1025"}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["data"], 
                 TextCell["data"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["training examples:"], 
                  TextCell["training examples:"]], "1050"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["processed examples:"], 
                  TextCell["processed examples:"]], "528000"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["skipped examples:"], 
                  TextCell["skipped examples:"]], "0"}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["method"], 
                 TextCell["method"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["ADAM"], 
                  TextCell["ADAM"]], 
                 InterpretationBox[
                  Cell["optimizer"], 
                  TextCell["optimizer"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batch size"], 
                  TextCell["batch size"]], "32"}, "RowWithSeparators"], 
               InterpretationBox[
                Cell["GPU"], 
                TextCell["GPU"]]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["round"], 
                 TextCell["round"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                 TagBox[
                  InterpretationBox[
                   StyleBox[
                    RowBox[{"\"8.31\"", "\[Times]", 
                    SuperscriptBox["10", "\"-4\""]}], ShowStringCharacters -> 
                    False], 0.0008310904501024307, AutoDelete -> True], 
                  ScientificForm[#, 3]& ]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             ItemBox[GridBox[{
                {"", 
                 ItemBox["\<\"rounds\"\>",
                  DefaultBaseStyle->"LabeledLabel"]},
                {
                 RotationBox[
                  ItemBox["\<\"loss\"\>",
                   DefaultBaseStyle->"LabeledLabel"],
                  BoxRotation->1.5708], 
                 GraphicsBox[
                  {AbsoluteThickness[1.25], {
                    {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
aGZv7/19g0IzX1ZBAnjLVwdl0fz+P6M3xY4=
                    "]]}, {}}, {
                    {Hue[0.59, 0.7, 0.75], LineBox[{}]}, 
                    {Hue[0.59, 0.7, 0.65], AbsolutePointSize[4.5], 
                    PointBox[{}]}}},
                  AspectRatio->Full,
                  Axes->None,
                  Background->GrayLevel[1],
                  
                  BaseStyle->{
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6},
                  Frame->True,
                  FrameStyle->GrayLevel[0.5],
                  FrameTicks->None,
                  GridLines->{{100., 200., 300., 400., 500.}, {{-4., 
                    GrayLevel[0.3001]}, {-3., 
                    GrayLevel[0.3001]}, {-2., 
                    GrayLevel[0.3001]}, {-3.6989700043360187`, 
                    GrayLevel[0.8501]}, {-3.397940008672037, 
                    GrayLevel[0.8501]}, {-3.2218487496163557`, 
                    GrayLevel[0.8501]}, {-3.096910013008056, 
                    GrayLevel[0.8501]}, {-2.6989700043360183`, 
                    GrayLevel[0.8501]}, {-2.397940008672037, 
                    GrayLevel[0.8501]}, {-2.221848749616356, 
                    GrayLevel[0.8501]}, {-2.0969100130080562`, 
                    GrayLevel[0.8501]}, {-1.6989700043360185`, 
                    GrayLevel[0.8501]}, {-1.3979400086720375`, 
                    GrayLevel[0.8501]}, {-1.2218487496163564`, 
                    GrayLevel[0.8501]}, {-1.0969100130080565`, 
                    GrayLevel[0.8501]}}},
                  ImagePadding->1,
                  ImageSize->{302, 182.},
                  PlotRange->{{0, 500.0151515151515}, {-3.322, -1.078}},
                  PlotRangeClipping->True,
                  PlotRangePadding->None,
                  Prolog->{{
                    InsetBox[
                    FormBox["100", TraditionalForm], 
                    Offset[{-2, -2}, {100., -1.078}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["200", TraditionalForm], 
                    Offset[{-2, -2}, {200., -1.078}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["300", TraditionalForm], 
                    Offset[{-2, -2}, {300., -1.078}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["400", TraditionalForm], 
                    Offset[{-2, -2}, {400., -1.078}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["500", TraditionalForm], 
                    Offset[{-2, -2}, {500., -1.078}], 
                    ImageScaled[{1., 1.}]]}, {
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"10", "\"-3\""}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], TraditionalForm], 
                    Offset[{3, 0}, {0, -3.}], 
                    ImageScaled[{0, 0.}]], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"10", "\"-2\""}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], TraditionalForm], 
                    Offset[{3, 0}, {0, -2.}], 
                    ImageScaled[{0, 0.}]]}}]}
               },
               
               BaseStyle->{
                FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                 GrayLevel[0.4]},
               
               GridBoxAlignment->{
                "Columns" -> {{Center}}, "Rows" -> {{Center}}},
               GridBoxSpacings->{"Columns" -> {{0.5}}}],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"},
            {
             ItemBox[
              
              InterpretationBox[Cell[
               "",ExpressionUUID->"d5d98ec7-efbe-45b6-a6b4-d92101164e81"],
               TextCell[""]],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           ColumnsEqual->False,
           
           GridBoxAlignment->{
            "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
           GridBoxDividers->{"Columns" -> {False, {
                Opacity[0.15]}, False}},
           GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], 
               Offset[1.1199999999999999`], {
                Offset[1.75]}, 
               Offset[0.27999999999999997`]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.8]}, 
               Offset[0.2]}}],
          "Grid"],
         FrameMargins->{{10, 10}, {10, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       Alignment->Center,
       BaseStyle->{
        FontWeight -> "Light", FontSize -> 11, FontFamily -> 
         "Microsoft YaHei UI", NumberMarks -> False, Deployed -> False},
       StripOnInput->False]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], 
        Offset[0.8], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Background->GrayLevel[1],
   FrameMargins->{{0, 0}, {0, 0}},
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False], 
  StyleBox["]", "NonInterpretableSummary"]}]], "Output",
 CellChangeTimes->{3.8551038345174217`*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"6e3fe0e9-727d-4660-974b-dfd53a2066be"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"generator", "=", 
   RowBox[{"NetReplacePart", "[", 
    RowBox[{
     RowBox[{"autoencoder", "[", 
      RowBox[{"[", "\"\<generator\>\"", "]"}], "]"}], ",", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", 
      RowBox[{"NetDecoder", "[", "\"\<Image\>\"", "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.855103447271965*^9},ExpressionUUID->"d4a6f54c-2510-4d89-b814-\
d29f840d4965"],

Cell[BoxData[
 RowBox[{
  RowBox[{"discriminator", "=", 
   RowBox[{"NetAppend", "[", 
    RowBox[{
     RowBox[{"autoencoder", "[", 
      RowBox[{"[", "\"\<compressor\>\"", "]"}], "]"}], ",", 
     RowBox[{"LinearLayer", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"\"\<Weights\>\"", "\[Rule]", "0"}], ",", 
       RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}]}], "]"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"NetEncoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Image\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"64", ",", "64"}], "}"}]}], "}"}], "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8551034488548384`*^9},ExpressionUUID->"f4a94a0b-4395-4e43-b354-\
1df1588c6ee0"],

Cell[BoxData[
 RowBox[{"NetGANOperator", "[", 
  RowBox[{"{", 
   RowBox[{"generator", ",", "discriminator"}], "}"}], "]"}]], "Input",Express\
ionUUID->"0be37855-f946-44a5-9d4f-c7dd748d83e8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datagen", "=", 
   RowBox[{"Function", "[", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Sample\>\"", "\[Rule]", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"pokemons", ",", "#BatchSize"}], "]"}]}], ",", 
      RowBox[{"\"\<Latent\>\"", "\[Rule]", 
       RowBox[{"getRandomLatent", "[", "#BatchSize", "]"}]}]}], "|>"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getRandomLatent", " ", "[", "batchSize_", "]"}], ":=", 
  RowBox[{"RandomReal", "[", 
   RowBox[{"1", ",", " ", 
    RowBox[{"{", 
     RowBox[{"batchSize", ",", " ", "32"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8551034962784634`*^9, 3.8551035050733414`*^9}, {
  3.855103554580078*^9, 3.8551035646046963`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"676ad590-873e-4852-957c-be3b8a298831"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"squash", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ElementwiseLayer", "[", 
        RowBox[{
         SuperscriptBox["#1", "2"], "&"}], "]"}], ",", 
       RowBox[{"AggregationLayer", "[", 
        RowBox[{"Total", ",", "1"}], "]"}], ",", 
       RowBox[{"ElementwiseLayer", "[", 
        RowBox[{
         FractionBox[
          SqrtBox["#1"], 
          RowBox[{"1", "+", "#1"}]], "&"}], "]"}], ",", 
       RowBox[{"ReplicateLayer", "[", "Automatic", "]"}], ",", 
       RowBox[{"ThreadingLayer", "[", "Times", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
        RowBox[{"1", "\[Rule]", 
         RowBox[{"2", "\[Rule]", 
          RowBox[{"3", "\[Rule]", 
           RowBox[{"4", "\[Rule]", "5"}]}]}]}]}], ",", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", "5"}]}], 
      "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"{", "Automatic", "}"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getRandomLatent", " ", "[", "batchSize_", "]"}], ":=", " ", 
  RowBox[{"squash", "@", " ", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"batchSize", ",", " ", "32"}], "}"}]}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.855103523154191*^9, 3.8551035508090496`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"99933f11-ce1f-403d-a2d4-9e3676e337b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"frames", "=", 
   RowBox[{"{", "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8551035858585744`*^9, 3.855103588118534*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"3dfe0110-3d24-45f3-8853-75b40ff1f4f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"monitor", "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"latents", "=", 
       RowBox[{"getRandomLatent", "[", "25", "]"}]}], "}"}], ",", 
     RowBox[{"Function", "[", 
      RowBox[{"generator", ",", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"frames", ",", 
         RowBox[{"ImageCollage", "[", 
          RowBox[{
           RowBox[{"generator", "[", "latents", "]"}], ",", 
           RowBox[{"ImagePadding", "\[Rule]", "1"}]}], "]"}]}], "]"}]}], 
      "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8551035836207237`*^9, 3.8551036398714433`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"5b639e1b-c275-4665-8666-4f2e81dbb94a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainedGan", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
     RowBox[{"NetGANOperator", "[", 
      RowBox[{"{", 
       RowBox[{"generator", ",", "discriminator"}], "}"}], "]"}], ",", 
     "datagen", ",", 
     RowBox[{"TrainingUpdateSchedule", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Discriminator\>\"", "\[Rule]", "3"}], ",", 
        RowBox[{"\"\<Generator\>\"", "\[Rule]", "3"}]}], "}"}]}], ",", 
     RowBox[{"BatchSize", "\[Rule]", "64"}], ",", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "50000"}], ",", 
     RowBox[{"TargetDevice", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<GPU\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"TrainingProgressReporting", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"monitor", "[", 
          RowBox[{"NetExtract", "[", 
           RowBox[{"#Net", ",", "\"\<Generator\>\""}], "]"}], "]"}], "&"}], 
        ",", 
        RowBox[{"\"\<Interval\>\"", "\[Rule]", 
         TemplateBox[{"250", "\"rounds\"", "rounds", "\"Rounds\""},
          "Quantity"]}]}], "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8549671512688875`*^9, 3.8549671685030375`*^9}, {
  3.8551036544823465`*^9, 
  3.855103661739487*^9}},ExpressionUUID->"4fbd1eae-d2ba-432c-bce2-\
f0134c68839c"],

Cell[BoxData[
 RowBox[{"generator", "=", 
  RowBox[{"trainedGan", "[", 
   RowBox[{"[", "\"\<Generator\>\"", "]"}], "]"}]}]], "Input",ExpressionUUID->\
"6e04cb08-bfec-4d1a-9a9e-61311b79f580"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"newPokemons", "=", 
    RowBox[{"generator", "[", 
     RowBox[{"getRandomLatent", "[", "112", "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ImageAssemble", "[", 
  RowBox[{
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"SortBy", "[", 
      RowBox[{"newPokemons", ",", 
       RowBox[{
        RowBox[{"DominantColors", "[", 
         RowBox[{"#", ",", "1", ",", 
          RowBox[{"Masking", "\[Rule]", 
           RowBox[{"Binarize", "[", 
            RowBox[{
             RowBox[{"ColorDistance", "[", 
              RowBox[{"#1", ",", "White"}], "]"}], ",", "0.1`"}], "]"}]}]}], 
         "]"}], "&"}]}], "]"}], ",", "8"}], "]"}], ",", 
   RowBox[{"Spacings", "\[Rule]", "10"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.855103878387151*^9, 
  3.8551038829603615`*^9}},ExpressionUUID->"f3e66541-450b-422f-b9ce-\
f31aefaed6ea"]
}, Open  ]]
},
WindowSize->{1440., 741.75},
WindowMargins->{{-6, Automatic}, {Automatic, -6}},
FrontEndVersion->"13.0 for Microsoft Windows (64-bit) (2022\:5e742\:67084\
\:65e5)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"55762416-7b32-4975-81e6-389e325662f6"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 158, 3, 98, "Title",ExpressionUUID->"89598524-14eb-45d9-9495-e4b5709e4981"],
Cell[741, 27, 404, 9, 35, "Text",ExpressionUUID->"0ee2376f-74c0-495e-ba5f-4abcf2a12b0b"],
Cell[1148, 38, 2187, 52, 51, "Input",ExpressionUUID->"1dd0fe20-853c-4f28-8096-7e6dd6b1f19a"],
Cell[CellGroupData[{
Cell[3360, 94, 241, 4, 44, "Input",ExpressionUUID->"ee13c919-76b8-4234-a30f-933bd81d7c72"],
Cell[3604, 100, 94697, 1582, 83, "Output",ExpressionUUID->"2e490647-a929-4845-a70e-0646a9a293ed"]
}, Open  ]],
Cell[98316, 1685, 837, 23, 81, "Input",ExpressionUUID->"dfe18f5d-cfbb-4e32-926c-665dd52b4107"],
Cell[CellGroupData[{
Cell[99178, 1712, 486, 12, 44, "Input",ExpressionUUID->"34d63d2f-aac0-4aef-ae05-71e974f656c3"],
Cell[99667, 1726, 306570, 5523, 54, "Output",ExpressionUUID->"c11f5270-17d3-4947-9dd0-4a62621357ba"]
}, Open  ]],
Cell[406252, 7252, 355, 9, 44, "Input",ExpressionUUID->"87880bc8-5661-4c95-9139-814d5dfc09bb"],
Cell[CellGroupData[{
Cell[406632, 7265, 2012, 45, 154, "Input",ExpressionUUID->"9db64be9-282f-4f69-8dd4-fc5b4ded1777"],
Cell[408647, 7312, 890833, 15219, 57, "Output",ExpressionUUID->"63f54432-ca7c-44b0-a56d-6f7572e6c570"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1299517, 22536, 2633, 64, 251, "Input",ExpressionUUID->"af513b03-43ad-4dce-8fef-f11f34668807"],
Cell[1302153, 22602, 48907, 964, 54, "Output",ExpressionUUID->"3c1b68fe-fc84-46ac-af7b-2b7d514fcb8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1351097, 23571, 2239, 55, 312, "Input",ExpressionUUID->"2ff4ed6c-cf65-4c50-ab46-434f76d19660"],
Cell[1353339, 23628, 45843, 906, 54, "Output",ExpressionUUID->"87071601-375e-4262-ad40-89ffa3df5c27"]
}, Open  ]],
Cell[1399197, 24537, 855, 21, 81, "Input",ExpressionUUID->"47d8c7e4-4fa5-4486-9915-215fdd7275b9"],
Cell[1400055, 24560, 726, 17, 44, "Input",ExpressionUUID->"a8792696-2ce3-41d5-9dc6-f4394cfc70dc"],
Cell[CellGroupData[{
Cell[1400806, 24581, 892, 19, 66, "Input",ExpressionUUID->"6492af9c-9b5e-47c8-b7a8-cb35d59051b8"],
Cell[1401701, 24602, 17354, 380, 419, "Output",ExpressionUUID->"6e3fe0e9-727d-4660-974b-dfd53a2066be"]
}, Open  ]],
Cell[1419070, 24985, 429, 12, 44, "Input",ExpressionUUID->"d4a6f54c-2510-4d89-b814-d29f840d4965"],
Cell[1419502, 24999, 759, 21, 44, "Input",ExpressionUUID->"f4a94a0b-4395-4e43-b354-1df1588c6ee0"],
Cell[1420264, 25022, 191, 4, 44, "Input",ExpressionUUID->"0be37855-f946-44a5-9d4f-c7dd748d83e8"],
Cell[1420458, 25028, 848, 21, 81, "Input",ExpressionUUID->"676ad590-873e-4852-957c-be3b8a298831"],
Cell[1421309, 25051, 1607, 43, 149, "Input",ExpressionUUID->"99933f11-ce1f-403d-a2d4-9e3676e337b5"],
Cell[1422919, 25096, 242, 6, 29, "Input",ExpressionUUID->"3dfe0110-3d24-45f3-8853-75b40ff1f4f1"],
Cell[1423164, 25104, 721, 19, 44, "Input",ExpressionUUID->"5b639e1b-c275-4665-8666-4f2e81dbb94a"],
Cell[1423888, 25125, 1411, 35, 97, "Input",ExpressionUUID->"4fbd1eae-d2ba-432c-bce2-f0134c68839c"],
Cell[1425302, 25162, 191, 4, 29, "Input",ExpressionUUID->"6e04cb08-bfec-4d1a-9a9e-61311b79f580"],
Cell[1425496, 25168, 980, 26, 87, "Input",ExpressionUUID->"f3e66541-450b-422f-b9ce-f31aefaed6ea"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

